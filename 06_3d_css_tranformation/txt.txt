Transformări CSS tridimensionale (3D) !!!!

--> Ca şi la sistemul de coordonate bidimensional, axa orizontală este, de fapt, axa x, în timp ce axa verticală este axa y. A treia axă, (axa z), este perpendiculară pe planul construit pe axele x şi y.

--> Obţinerea rotirii în sistemul de coordonate 3D se poate efectua în felul următor:
// #transformed {
transform: rotateX(30deg) rotateY(30deg) rotateZ(30deg);
}

--> Un efect identic se poate obţine şi în felul următor, prin unificarea definirii rotirii pe toate axele:
// transform: rotate3d(1,1,1, 30deg);

--> De această dată am folosit funcţia rotate3d(). Primii trei parametri se referă la axele în jurul cărora se va efectua rotirea.
 Numărul 1 ne arată că va avea loc rotirea, iar 0 că nu va exista nicio rotire. În general, primii trei parametri se referă la axele x,y şi z. 
 Ultimul parametru defineşte unghiul de rotaţie. 

--> Din exemplele prezentate vedem că funcţiile CSS pentru obţinerea transformărilor 3D sunt diferite:
//translateX(x) -->	translaţie pe axa x
//translateY(y) -->	translaţie pe axa y
//translateZ(z) -->	translaţie pe axa z
//scaleX(x) -->	schimbarea dimensiunii, doar pe axa x
//scaleY(y) -->	schimbarea dimensiunii, doar pe axa y
//scaleZ(z) -->	schimbarea dimensiunii, doar pe axa z
//rotateX(angle) --> rotire, doar pe axa x
//rotateY(angle) --> rotire, doar pe axa y
//rotateZ(angle) --> rotire, doar pe axa z

--> Pentru a obţine transformările 3D, putem să folosim şi funcţii specifice care unifică toate cele trei axe:
//translate(x,y) --> translate3d(x,y,z)	--> translaţie 3D
//rotate(angle) --> rotate3d(x,y,z,angle) --> rotire 3D 
//scale(x,y) --> scale3d(x,y,z)	--> scalare 3D 
//matrix3d(n,n,n,n,n,n) --> matrix3d(n,n,n,n,n,n,n,n, n,n,n,n,n,n,n,n) --> definire unificată a tuturor transformărilor


!!Perspectiva.

--> În CSS, perspectiva se poate defini în două moduri, şi anume:În CSS, perspectiva se poate defini în două moduri, şi anume:
1.folosind funcţia perspective()
-->În acest caz, perspectiva se defineşte ca parte a valorii proprietăţii transform pe un element concret. De exemplu:
//transform: perspective(700px) rotateX(30deg) rotateY(30deg) rotateZ(30deg);
2.folosind proprietatea perspective

!!!! Funcţia perspective() şi proprietatea perspective.

--> între aceste două modalităţi de definire a perspectivei există o diferenţă clară, şi anume:
*cu funcţia perspective() se defineşte perspectiva pentru fiecare element individual; această abordare este bună doar dacă trebuie definită perspectiva pe un element, deoarece în acest fel, fiecare element se plasează într-un spaţiu 3D separat;

*dacă mai multe elemente trebuie să formeze un spaţiu, atunci cel mai bine ar fi să folosim proprietatea perspective; această proprietate defineşte perspectiva pentru toate elementele care sunt descendenţii elementelor pe care s-a definit proprietatea; 
aceasta înseamnă practic că proprietatea perspective se defineşte pe elementul părinte, în timp ce efectul este aplicat pe toţi descendenţii.


!!Punctul de infinit.

--> Punctul de referinţă al perspectivei se mai numeşte şi punct de infinit (vanishing point). Acesta este punctul în care, în îndepărtare se intersectează două planuri paralele ale reprezentării 3D.

--> Poziţia punctului de infinit, iar pe lângă aceasta şi poziţia din care se observă elementul transformat, se poate influenţa folosind proprietatea perspective-origin:
//perspective-origin: x-position;
//perspective-origin: x-position y-position;

--> Este important să menţionăm că proprietatea perspective-origin se foloseşte în combinaţie cu proprietatea perspective, ceea ce înseamnă că ambele proprietăţi menţionate se definesc pe elementul părinte şi se aplică pe elementele descendente:
//perspective: 300px;
//perspective-origin: 0% 50%;

--> Mai devreme am spus că punctul de origine se află în centrul elementului cu perspectiva, ceea ce practic înseamnă că este valoarea implicită a acestei proprietăţi:
//perspective-origin: 50% 50%;


!!Păstrarea spaţiului 3D.

--> Proprietatea transform-style poate avea două valori, şi anume:
//flat
//preserve-3d
--> Ca să păstrăm spaţiul 3D al descendenţilor, ca valoare a proprietăţii transform-style trebuie să setăm preserve-3d.























